import{_ as o,c,o as t,ag as d}from"./chunks/framework.DPDPlp3K.js";const r="/assets/image-20240430142558508.DKmulgC9.png",E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端/electron/2.Electron架构.md","filePath":"前端/electron/2.Electron架构.md","lastUpdated":1742622918000}'),a={name:"前端/electron/2.Electron架构.md"};function n(p,e,s,_,l,i){return t(),c("div",null,e[0]||(e[0]=[d('<p><img src="'+r+'" alt="image-20240430142558508"></p><p>每个 Electron 都是由 <code>1 个主进程</code>、<code> 1 个或多个渲染进程</code>组成的，开发者的主要工作就是完成主进程的逻辑和渲染进程的逻辑。</p><p>Electron 应用启动时，首先会加载主进程的逻辑，主进程会创建一个或多个窗口，我们暂时可以粗浅的认为<code>一个窗口就代表一个渲染进程</code>，主进程负责管理所有的渲染进程。</p><p>窗口内加载的页面就是开发者要实现的渲染进程的逻辑，我们可以让渲染进程与主进程通信，他们之间是通过 <code>IPC 消息管道</code>进行通信的。虽然有一些特殊的手段让两个渲染进程直接通信，但大部分时候还是通过主进程来中转消息以达到渲染进程间通信的目的。</p><p>Electron 提供的一系列内置模块大部分是专门为主进程的逻辑服务的，比如 <code>app</code> 模块、<code>BrowserWindow</code> 模块和 <code>session </code>模块等，少量模块是专门为渲染进程的逻辑服务的，比如 <code>ipcRenderer </code>模块、<code>webFrame </code>模块等，只有少量模块是两个进程可以同时使用的，比如：<code>clipboard</code> 模块、<code>desktopCapturer </code>模块等。我们应该清楚这些模块的势力范围，不能在主进程中使用渲染进程的模块，反之也不行。</p>',5)]))}const f=o(a,[["render",n]]);export{E as __pageData,f as default};

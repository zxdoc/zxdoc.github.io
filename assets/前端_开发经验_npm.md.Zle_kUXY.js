import{_ as i,c as s,o as t,ag as e}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"NPM 包不发布到远程给团队使用的几种方法","description":"","frontmatter":{},"headers":[],"relativePath":"前端/开发经验/npm.md","filePath":"前端/开发经验/npm.md","lastUpdated":1742814659000}'),l={name:"前端/开发经验/npm.md"};function n(h,a,p,r,o,d){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="npm-包不发布到远程给团队使用的几种方法" tabindex="-1">NPM 包不发布到远程给团队使用的几种方法 <a class="header-anchor" href="#npm-包不发布到远程给团队使用的几种方法" aria-label="Permalink to &quot;NPM 包不发布到远程给团队使用的几种方法&quot;">​</a></h1><p>在一些项目中，可能不希望将 NPM 包发布到远程 NPM 仓库（如 npmjs.com），而是希望在团队内部使用该包。以下是几种常见的做法，可以确保在不发布到公共仓库的情况下，团队成员仍然可以使用该包。</p><h2 id="_1-使用本地-npm-目录" tabindex="-1">1. 使用本地 NPM 目录 <a class="header-anchor" href="#_1-使用本地-npm-目录" aria-label="Permalink to &quot;1. 使用本地 NPM 目录&quot;">​</a></h2><h3 id="方法概述" tabindex="-1">方法概述 <a class="header-anchor" href="#方法概述" aria-label="Permalink to &quot;方法概述&quot;">​</a></h3><p>将包作为本地依赖项添加到项目中，直接通过文件路径引用。</p><h3 id="步骤" tabindex="-1">步骤 <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><ol><li><p><strong>打包并发布到本地文件夹</strong>： 在项目根目录下运行以下命令来打包 NPM 包：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pack</span></span></code></pre></div></li></ol><p>这将生成一个 <code>.tgz</code> 文件，它是压缩的 NPM 包。</p><ol start="2"><li><p><strong>安装本地依赖</strong>： 在团队成员的项目中，使用本地路径安装包：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/package-name-1.0.0.tgz</span></span></code></pre></div></li></ol><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>不需要依赖网络连接。</li><li>可以通过版本控制管理本地包。</li></ul><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>需要手动管理和传递 <code>.tgz</code> 文件。</li><li>不便于版本管理和更新。</li></ul><h2 id="_2-使用私有-npm-仓库" tabindex="-1">2. 使用私有 NPM 仓库 <a class="header-anchor" href="#_2-使用私有-npm-仓库" aria-label="Permalink to &quot;2. 使用私有 NPM 仓库&quot;">​</a></h2><h3 id="方法概述-1" tabindex="-1">方法概述 <a class="header-anchor" href="#方法概述-1" aria-label="Permalink to &quot;方法概述&quot;">​</a></h3><p>使用私有的 NPM 仓库（例如 Nexus、Verdaccio、GitHub Packages）来发布和管理包，只对团队开放。</p><h3 id="步骤-1" tabindex="-1">步骤 <a class="header-anchor" href="#步骤-1" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><ol><li><p><strong>搭建私有 NPM 仓库</strong>： 你可以选择使用一些常见的工具如 <a href="https://verdaccio.org/" target="_blank" rel="noreferrer">Verdaccio</a> 或 <a href="https://www.sonatype.com/products/repository-pro" target="_blank" rel="noreferrer">Nexus</a> 来搭建私有 NPM 仓库。</p></li><li><p><strong>配置 <code>.npmrc</code> 文件</strong>： 在项目中创建或编辑 <code>.npmrc</code> 文件，添加私有仓库的配置：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">registry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://your-private-registry.com/</span></span></code></pre></div></li><li><p><strong>发布包到私有仓库</strong>： 使用 <code>npm publish</code> 命令将包发布到私有仓库。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://your-private-registry.com/</span></span></code></pre></div></li><li><p><strong>安装私有仓库的包</strong>： 团队成员可以通过配置 <code>.npmrc</code> 文件来安装私有仓库中的包：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li></ol><h3 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>可以使用完整的 NPM 功能。</li><li>可管理多个版本，适合大团队。</li></ul><h3 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>需要搭建和维护私有仓库。</li><li>需要团队成员配置私有仓库。</li></ul><h2 id="_3-使用-git-作为私有-npm-仓库" tabindex="-1">3. 使用 Git 作为私有 NPM 仓库 <a class="header-anchor" href="#_3-使用-git-作为私有-npm-仓库" aria-label="Permalink to &quot;3. 使用 Git 作为私有 NPM 仓库&quot;">​</a></h2><h3 id="方法概述-2" tabindex="-1">方法概述 <a class="header-anchor" href="#方法概述-2" aria-label="Permalink to &quot;方法概述&quot;">​</a></h3><p>通过 Git 仓库（如 GitHub、GitLab 或 Bitbucket）托管 NPM 包，团队成员可以直接从 Git 仓库中安装依赖。</p><h3 id="步骤-2" tabindex="-1">步骤 <a class="header-anchor" href="#步骤-2" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><ol><li><p><strong>将包发布到 Git 仓库</strong>： 在项目根目录运行以下命令，将包作为 Git 仓库发布：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-git-repo-ur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div></li><li><p><strong>安装 Git 仓库中的包</strong>： 团队成员可以通过以下命令从 Git 仓库安装包：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git+https://github.com/username/repository.git</span></span></code></pre></div><p>如果需要安装特定分支，可以使用如下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git+https://github.com/username/repository.git#branch-name</span></span></code></pre></div></li></ol><h3 id="优点-2" tabindex="-1">优点 <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>简单易用，不需要额外的仓库管理工具。</li><li>直接通过 Git 仓库安装和管理。</li></ul><h3 id="缺点-2" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>安装时依赖网络连接，且速度可能不如私有 NPM 仓库。</li><li>不支持完整的 NPM 功能（例如版本管理）。</li></ul><h2 id="_4-使用-github-actions-或-ci-cd-管道发布包" tabindex="-1">4. 使用 GitHub Actions 或 CI/CD 管道发布包 <a class="header-anchor" href="#_4-使用-github-actions-或-ci-cd-管道发布包" aria-label="Permalink to &quot;4. 使用 GitHub Actions 或 CI/CD 管道发布包&quot;">​</a></h2><h3 id="方法概述-3" tabindex="-1">方法概述 <a class="header-anchor" href="#方法概述-3" aria-label="Permalink to &quot;方法概述&quot;">​</a></h3><p>通过 CI/CD 工具（例如 GitHub Actions、GitLab CI）在每次提交时自动构建并发布 NPM 包到私有仓库，或者直接将包传递给团队。</p><h3 id="步骤-3" tabindex="-1">步骤 <a class="header-anchor" href="#步骤-3" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><ol><li><p><strong>设置 CI/CD 流程</strong>： 配置 GitHub Actions 或其他 CI/CD 工具来自动构建和发布包。例如，使用 GitHub Actions 配置一个自动发布的工作流。</p></li><li><p><strong>团队成员自动安装</strong>： 配置好 CI/CD 流程后，团队成员可以通过普通的 <code>npm install</code> 命令来获取到最新的私有包。</p></li></ol><h3 id="优点-3" tabindex="-1">优点 <a class="header-anchor" href="#优点-3" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>自动化流程，减少手动操作。</li><li>适合大规模开发，能够持续集成和部署。</li></ul><h3 id="缺点-3" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-3" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>需要一定的 CI/CD 知识和配置。</li><li>需要搭建私有仓库或配置外部仓库。</li></ul><h2 id="_5-使用-npm-workspaces-对于单个大型项目" tabindex="-1">5. 使用 NPM Workspaces（对于单个大型项目） <a class="header-anchor" href="#_5-使用-npm-workspaces-对于单个大型项目" aria-label="Permalink to &quot;5. 使用 NPM Workspaces（对于单个大型项目）&quot;">​</a></h2><h3 id="方法概述-4" tabindex="-1">方法概述 <a class="header-anchor" href="#方法概述-4" aria-label="Permalink to &quot;方法概述&quot;">​</a></h3><p>在一个包含多个子项目的大型项目中，使用 NPM Workspaces 来管理和共享本地包。</p><h3 id="步骤-4" tabindex="-1">步骤 <a class="header-anchor" href="#步骤-4" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><ol><li><p><strong>初始化 Workspaces</strong>： 在项目的根目录下创建 <code>package.json</code>，并定义工作区（workspaces）：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;monorepo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;private&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;workspaces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;packages/*&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>安装和使用本地依赖</strong>： 在子项目中，直接引用其他子项目作为依赖。</p></li><li><p><strong>构建和运行</strong>： 使用 <code>npm install</code> 安装所有工作区的依赖。</p></li></ol><h3 id="优点-4" tabindex="-1">优点 <a class="header-anchor" href="#优点-4" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>适用于大型项目，所有包都在同一个仓库中。</li><li>方便管理和开发多个子项目。</li></ul><h3 id="缺点-4" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-4" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>适合大型项目，复杂性较高。</li><li>所有代码需要在一个仓库中管理。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>以上是几种常见的方法，可以让团队在不发布到远程 NPM 仓库的情况下，使用和管理本地 NPM 包。每种方法都有自己的优缺点，具体选择哪种方式可以根据项目的需求、团队规模以及对自动化和管理的要求来决定。</p>`,51)]))}const g=i(l,[["render",n]]);export{c as __pageData,g as default};

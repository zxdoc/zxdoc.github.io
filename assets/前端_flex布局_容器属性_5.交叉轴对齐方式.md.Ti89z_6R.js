import{_ as s,c as e,o as i,ag as t}from"./chunks/framework.DPDPlp3K.js";const n="/assets/image-20240507084141075.Dc7rfwfQ.png",l="/assets/image-20240507084305717.WAOMcJix.png",r="/assets/image-20240507084348905.C8DfFzT5.png",h="/assets/image-20240507084413672.BYSbGThO.png",p="/assets/image-20240507084502115.BWbZTNe1.png",f=JSON.parse('{"title":"align-items","description":"","frontmatter":{},"headers":[],"relativePath":"前端/flex布局/容器属性/5.交叉轴对齐方式.md","filePath":"前端/flex布局/容器属性/5.交叉轴对齐方式.md","lastUpdated":1742622918000}'),o={name:"前端/flex布局/容器属性/5.交叉轴对齐方式.md"};function c(d,a,k,g,m,_){return i(),e("div",null,a[0]||(a[0]=[t(`<h1 id="align-items" tabindex="-1">align-items <a class="header-anchor" href="#align-items" aria-label="Permalink to &quot;align-items&quot;">​</a></h1><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">baseline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stretch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>针对只有单行的情况</p></blockquote><h2 id="stretch" tabindex="-1">stretch <a class="header-anchor" href="#stretch" aria-label="Permalink to &quot;stretch&quot;">​</a></h2><p>如果项目未设置高度或者值为auto 那么它的高度就是容器高度</p><p><img src="`+n+'" alt="image-20240507084141075"></p><h2 id="flex-start" tabindex="-1">flex-start <a class="header-anchor" href="#flex-start" aria-label="Permalink to &quot;flex-start&quot;">​</a></h2><p>设置为交叉轴的起点</p><p><img src="'+l+'" alt="image-20240507084305717"></p><h2 id="flex-end" tabindex="-1">flex-end <a class="header-anchor" href="#flex-end" aria-label="Permalink to &quot;flex-end&quot;">​</a></h2><p>交叉轴终点对齐方式</p><p><img src="'+r+'" alt="image-20240507084348905"></p><h2 id="center" tabindex="-1">center <a class="header-anchor" href="#center" aria-label="Permalink to &quot;center&quot;">​</a></h2><p>居中对齐</p><p><img src="'+h+'" alt="image-20240507084413672"></p><h2 id="baseline" tabindex="-1">baseline <a class="header-anchor" href="#baseline" aria-label="Permalink to &quot;baseline&quot;">​</a></h2><p>文字基线对齐</p><p><img src="'+p+'" alt="image-20240507084502115"></p>',18)]))}const b=s(o,[["render",c]]);export{f as __pageData,b as default};

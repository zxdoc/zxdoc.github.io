import{_ as a,c as n,o as p,ag as e}from"./chunks/framework.BgId8OS5.js";const u=JSON.parse('{"title":"最低成本部署静态网站","description":"","frontmatter":{},"headers":[],"relativePath":"搭建博客系统/4.github自动部署.md","filePath":"搭建博客系统/4.github自动部署.md","lastUpdated":1749111669000}'),i={name:"搭建博客系统/4.github自动部署.md"};function t(l,s,o,c,r,g){return p(),n("div",null,s[0]||(s[0]=[e(`<h1 id="最低成本部署静态网站" tabindex="-1">最低成本部署静态网站 <a class="header-anchor" href="#最低成本部署静态网站" aria-label="Permalink to &quot;最低成本部署静态网站&quot;">​</a></h1><p>所谓静态网站，是指它所有内容都是静态的，即预先编写好并存储在服务器上，访问者获取到的是事先准备好的静态文件。</p><p>所以完全不需要购买服务器，除了域名之外，几乎不会有其他花销。</p><h2 id="github-建仓库" tabindex="-1"><strong>Github 建仓库</strong> <a class="header-anchor" href="#github-建仓库" aria-label="Permalink to &quot;**Github 建仓库**&quot;">​</a></h2><p>以我的个人 github 账号 <code>zxdoc</code> 为例，仓库名称就是 <code>zxdoc.github.io</code>。</p><p>当然，无论是个人账号还是组织账号，都可以创建这种仓库。</p><p><img src="https://gitee.com/zhaox010/pic-go-save/raw/master/image/202405110905337.png" alt="image-20240511090518230"></p><blockquote><p>这个名字非常重要 一定要起和域名一样的名字 仓库一定要开源</p></blockquote><h2 id="github-pages配置" tabindex="-1">Github pages配置 <a class="header-anchor" href="#github-pages配置" aria-label="Permalink to &quot;Github pages配置&quot;">​</a></h2><p><img src="https://gitee.com/zhaox010/pic-go-save/raw/master/image/202405110909158.png" alt="image-20240511090919099"></p><blockquote><p>创建成功以后就可以只要我们把构建完毕的<code>vite-press</code>代码传入到这个分支下 就可以使用这个域名自动预览了</p></blockquote><p><strong>这种方式比较麻烦的就是 这个仓库只能上传构建后的代码 不能上传源码 每次在本地构建完代码 还得把构建完之后的代码再传上去 比较麻烦</strong></p><p><strong>如何能实现全部自动化呢?</strong></p><h2 id="理解-github-actions" tabindex="-1">理解 GitHub Actions <a class="header-anchor" href="#理解-github-actions" aria-label="Permalink to &quot;理解 GitHub Actions&quot;">​</a></h2><p>你提交到仓库后，GitHub 会监控到，然后分配一台虚拟机先将你的项目 checkout 过去，然后按照你指定的 step 顺序执行定义好的 action，这些 action 就包括 <code>npm run build</code> 生成静态文件，push 到你指定的仓库或者push到你指定的分支等动作</p><p>为了实现上面的小目标，我们要让 GitHub 替我们做的事情如下：</p><ol><li>编译项目，生成静态文件。也就是对仓库 执行 npm run build 生成vite-press的静态资源。</li><li>把打包静态资源推送到另一个分支上，这一步完成后 GitHub Pages 就部署完成了(还记得我们上一张图片吗?我们可以设置gitpage到底用哪个分支的代码)。</li></ol><h2 id="构建工作流" tabindex="-1">构建工作流 <a class="header-anchor" href="#构建工作流" aria-label="Permalink to &quot;构建工作流&quot;">​</a></h2><p>首先在仓库的根目录下，创建 <code>.github/workflows/main.yml</code> 文件，这就是 GitHub Actions 功能的配置文件，用于告诉 GitHub 要做哪些事情，写入以下内容</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name: GitHub Actions Build and Deploy</span></span>
<span class="line"><span></span></span>
<span class="line"><span>on:</span></span>
<span class="line"><span>  # 手动运行工作流程（workflow_dispatch 事件触发器配置后可以在actions下手动运行工作流）</span></span>
<span class="line"><span>  workflow_dispatch:</span></span>
<span class="line"><span>  push:</span></span>
<span class="line"><span>    branches:</span></span>
<span class="line"><span>      - main</span></span>
<span class="line"><span></span></span>
<span class="line"><span>jobs:</span></span>
<span class="line"><span>  build-and-deploy:</span></span>
<span class="line"><span>    runs-on: ubuntu-latest #指定服务器的运行环境：最新版本ubuntu</span></span>
<span class="line"><span>    steps:</span></span>
<span class="line"><span>      # 使用actions/checkout@v4 库拉取代码到 ubuntu 上</span></span>
<span class="line"><span>      - name: Checkout</span></span>
<span class="line"><span>        uses: actions/checkout@v4</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          # 根据网上资料查询此处可以设置为 false。https://github.com/actions/checkout</span></span>
<span class="line"><span>          persist-credentials: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      # 安装 pnpm</span></span>
<span class="line"><span>      - name: Install pnpm</span></span>
<span class="line"><span>        uses: pnpm/action-setup@v2</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          version: 8</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      # 设置node的版本</span></span>
<span class="line"><span>      - name: Use Node.js</span></span>
<span class="line"><span>        # 使用 actions/setup-node@v3 库安装 nodejs，with 提供了一个参数 node-version 表示要安装的 nodejs 版本</span></span>
<span class="line"><span>        uses: actions/setup-node@v3</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          node-version: &quot;18.x&quot;</span></span>
<span class="line"><span>          cache: &quot;pnpm&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      # 打包成静态文件</span></span>
<span class="line"><span>      - name: Build</span></span>
<span class="line"><span>        run: pnpm install &amp;&amp; pnpm build</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      # 部署到GitHub Pages - 也就是将打包内容发布到GitHub Pages</span></span>
<span class="line"><span>      - name: Deploy</span></span>
<span class="line"><span>        # 使用别人写好的 actions去部署（将打包文件部署到指定分支上）</span></span>
<span class="line"><span>        uses: JamesIves/github-pages-deploy-action@v4.3.3</span></span>
<span class="line"><span>        # 自定义环境变量</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          # 指定仓库：你要发布的仓库路径名</span></span>
<span class="line"><span>          repository-name: zxdoc/zxdoc.github.io</span></span>
<span class="line"><span>          # 部署到 deploy-pages 分支，也就是部署后提交到那个分支</span></span>
<span class="line"><span>          branch: deploy-pages</span></span>
<span class="line"><span>          # 填写打包好的目录名称路径，本项目配置在根目录</span></span>
<span class="line"><span>          folder: dist</span></span></code></pre></div><p><strong>记得修改 repository-name 和 branch</strong></p><p><strong>记得把vite-press中的 <code>outDir</code> 设置为 <code>../dist</code> 不然会找不到打包后的文件</strong></p><hr><p><img src="https://gitee.com/zhaox010/pic-go-save/raw/master/image/202405110951170.png" alt="image-20240511095103143"></p><p><strong>如果你的主分支不叫main 这个地方要改</strong></p><hr><p><strong>记得新建一个分支 专门存放构建后的vite-press代码 主分支用来提交代码 另一分支用来存放构建后的代码</strong></p><p><img src="https://gitee.com/zhaox010/pic-go-save/raw/master/image/202405110923232.png" alt="image-20240511092323202"></p><hr><p><img src="https://gitee.com/zhaox010/pic-go-save/raw/master/image/202405110923321.png" alt="image-20240511092346282"></p><p><img src="https://gitee.com/zhaox010/pic-go-save/raw/master/image/202405110924663.png" alt="image-20240511092459619"></p><p><strong>这个页面需要配置权限(这个非常重要)</strong></p><h2 id="提交代码" tabindex="-1"><strong>提交代码</strong> <a class="header-anchor" href="#提交代码" aria-label="Permalink to &quot;**提交代码**&quot;">​</a></h2><p>后续我们就可以直接在主分支提交代码 github会自动检测到push 然后进行构建</p><p>构建流程可以在<code>Action</code>选项卡看到</p><p><img src="https://gitee.com/zhaox010/pic-go-save/raw/master/image/202405110941841.png" alt="image-20240511094126801"></p><p><img src="https://gitee.com/zhaox010/pic-go-save/raw/master/image/202405110949792.png" alt="image-20240511094916744"></p>`,37)]))}const d=a(i,[["render",t]]);export{u as __pageData,d as default};
